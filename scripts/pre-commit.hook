#!/usr/bin/env bash

CPPCHECK_unmatched=
for f in *.c; do
    CPPCHECK_unmatched="$CPPCHECK_unmatched --suppress=unmatchedSuppression:$f"
done

# We suppress the checkLevelNormal warning for Cppcheck versions 2.11 and above.
# Please refer to issues/153 for more details.
CPPCHECK_suppresses="--inline-suppr harness.c \
--suppress=checkersReport \
--suppress=unmatchedSuppression \
--suppress=normalCheckLevelMaxBranches \
--suppress=missingIncludeSystem \
--suppress=noValidConfiguration \
--suppress=unusedFunction \
--suppress=identicalInnerCondition:log2_lshift16.h \
--suppress=nullPointerRedundantCheck:report.c \
--suppress=nullPointerRedundantCheck:harness.c \
--suppress=nullPointerOutOfMemory:harness.c \
--suppress=staticFunction:harness.c \
--suppress=nullPointerRedundantCheck:queue.c \
--suppress=constParameterPointer:queue.c \
--suppress=memleak:queue.c \
--suppress=nullPointer:queue.c \
--suppress=nullPointer:qtest.c \
--suppress=returnDanglingLifetime:report.c \
--suppress=constParameterCallback:console.c \
--suppress=constParameterPointer:console.c \
--suppress=staticFunction:console.c \
--suppress=checkLevelNormal:log2_lshift16.h \
--suppress=preprocessorErrorDirective:random.h \
--suppress=constVariablePointer:linenoise.c \
--suppress=staticFunction:linenoise.c \
--suppress=nullPointerOutOfMemory:web.c \
--suppress=staticFunction:web.c \
"
CPPCHECK_OPTS="-I. --enable=all --error-exitcode=1 --force $CPPCHECK_suppresses $CPPCHECK_unmatched --cppcheck-build-dir=.out ."

RETURN=0
CLANG_FORMAT=$(which clang-format)
if [ $? -ne 0 ]; then
  throw "clang-format not installed. Unable to check source file format policy."
fi

CPPCHECK=$(which cppcheck)
mkdir -p .out
if [ $? -ne 0 ]; then
  throw "cppcheck not installed. Unable to perform static analysis."
fi

# Check that cppcheck's version is at least 1.90.
cppcheck_ver=$("$CPPCHECK" --version)
if echo "$cppcheck_ver" | grep -qE '^Cppcheck\s2'; then
  : # Version 2.x is acceptable.
else
  # For version 1.x, extract the minor version and compare.
  minor_version=$(echo "$cppcheck_ver" | sed -Ee 's/Cppcheck 1\.([0-9]+)/\1/;q')
  if [ "$minor_version" -lt 90 ]; then
    throw "cppcheck version must be at least 1.90.\n\
    See Developer Info for building cppcheck from source:\n\
        https://cppcheck.sourceforge.io/devinfo/"
  fi
fi

ASPELL=$(which aspell)
if [ $? -ne 0 ]; then
  throw "aspell not installed. Unable to do spelling check."
fi
if [ -z "$(aspell dump dicts | grep -E '^en$')" ]; then
  throw "aspell-en not installed. Unable to do spelling check."
fi

DIFF=$(which colordiff)
if [ $? -ne 0 ]; then
  DIFF=diff
fi

if command -v sha1sum >/dev/null 2>&1; then
  SHA1SUM="sha1sum"
elif command -v shasum >/dev/null 2>&1; then
  SHA1SUM="shasum"
else
  echo "[!] sha1sum or shasum not installed." >&2
  exit 1
fi

FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.(c|cpp|h)$")
for FILE in $FILES; do
    nf=$(git checkout-index --temp $FILE | cut -f 1)
    tempdir=$(mktemp -d) || exit 1
    newfile=$(mktemp ${tempdir}/${nf}.XXXXXX) || exit 1
    basename=$(basename $FILE)

  source="${tempdir}/${basename}"
  mv $nf $source
  cp .clang-format $tempdir
  $CLANG_FORMAT $source > $newfile 2>> /dev/null
  $DIFF -u -p -B \
        --label="modified $FILE" --label="expected coding style" \
        "${source}" "${newfile}"
  r=$?
  rm -rf "${tempdir}"
  if [ $r != 0 ] ; then
    echo "[!] $FILE does not follow the consistent coding style." >&2
    RETURN=1
  fi
  if [ $RETURN -eq 1 ]; then
    echo "" >&2
    echo "Make sure you indent as the following:" >&2
    echo "    clang-format -i $FILE" >&2
    echo
  fi
done

if [ ! -z "${FILES[*]}" ]; then
    echo "Following files need to be cleaned up:"
    echo "${FILES[*]}"
fi

$SHA1SUM -c scripts/checksums 2>/dev/null >/dev/null
if [ $? -ne 0 ]; then
  throw "You are not allowed to change the header file queue.h or list.h"
fi

# Prevent unsafe functions
root=$(git rev-parse --show-toplevel)
banned="([^f]gets\()|(sprintf\()|(strcpy\()"
status=0
for file in $(git diff --staged --name-only | grep -E "\.(c|cc|cpp|h|hh|hpp)\$")
do
    filepath="${root}/${file}"
    output=$(grep -nrE "${banned}" "${filepath}")
    if [ ! -z "${output}" ]; then
        echo "Dangerous function detected in ${filepath}"
        echo "${output}"
        echo
        echo "Read 'Common vulnerabilities guide for C programmers' carefully."
        echo "    https://security.web.cern.ch/security/recommendations/en/codetools/c.shtml"
        RETURN=1
    fi
done

# format string checks
if [[ "$OSTYPE" != darwin* ]]; then
  # Format string checks
  if [ ! -f fmtscan ]; then
    make fmtscan
    if [ ! -f fmtscan ]; then
      throw "Fail to build 'fmtscan' tool"
    fi
  fi
  if [ -n "$C_FILES" ]; then
    echo "Running fmtscan..."
    ./fmtscan
    if [ $? -ne 0 ]; then
      throw "Check format strings for spelling"
    fi
  fi
fi

# static analysis
echo "Running static analysis..."
$CPPCHECK $CPPCHECK_OPTS >/dev/null
if [ $? -ne 0 ]; then
    RETURN=1
    echo "" >&2
    echo "Fail to pass static analysis." >&2
    echo
fi

# non-ASCII filenames are not allowed.
# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository.
if test $(git diff --cached --name-only --diff-filter=A -z $against |
          LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
  cat <<\EOF
ERROR: Attempt to add a non-ASCII file name.
This can cause problems if you want to work with people on other platforms.
To be portable it is advisable to rename the file.
EOF
  RETURN=1
fi

exit $RETURN
